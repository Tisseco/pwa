/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as IsAuthenticatedImport } from './routes/_isAuthenticated'
import { Route as IsAuthenticatedIndexImport } from './routes/_isAuthenticated/index'
import { Route as mapCarteInteractiveImport } from './routes/(map)/carte-interactive'
import { Route as IsAuthenticatedScheduledToursIndexImport } from './routes/_isAuthenticated/scheduled-tours/index'
import { Route as IsAuthenticatedScheduledToursScheduledTourIdIndexImport } from './routes/_isAuthenticated/scheduled-tours/$scheduledTourId/index'
import { Route as reportSignalementAreaIdFormulaireImport } from './routes/(report)/signalement/$areaId/formulaire'
import { Route as reportSignalementAreaIdConfirmerLaLocalisationImport } from './routes/(report)/signalement/$areaId/confirmer-la-localisation'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IsAuthenticatedRoute = IsAuthenticatedImport.update({
  id: '/_isAuthenticated',
  getParentRoute: () => rootRoute,
} as any)

const IsAuthenticatedIndexRoute = IsAuthenticatedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => IsAuthenticatedRoute,
} as any)

const mapCarteInteractiveRoute = mapCarteInteractiveImport.update({
  id: '/(map)/carte-interactive',
  path: '/carte-interactive',
  getParentRoute: () => rootRoute,
} as any)

const IsAuthenticatedScheduledToursIndexRoute =
  IsAuthenticatedScheduledToursIndexImport.update({
    id: '/scheduled-tours/',
    path: '/scheduled-tours/',
    getParentRoute: () => IsAuthenticatedRoute,
  } as any)

const IsAuthenticatedScheduledToursScheduledTourIdIndexRoute =
  IsAuthenticatedScheduledToursScheduledTourIdIndexImport.update({
    id: '/scheduled-tours/$scheduledTourId/',
    path: '/scheduled-tours/$scheduledTourId/',
    getParentRoute: () => IsAuthenticatedRoute,
  } as any)

const reportSignalementAreaIdFormulaireRoute =
  reportSignalementAreaIdFormulaireImport.update({
    id: '/(report)/signalement/$areaId/formulaire',
    path: '/signalement/$areaId/formulaire',
    getParentRoute: () => rootRoute,
  } as any)

const reportSignalementAreaIdConfirmerLaLocalisationRoute =
  reportSignalementAreaIdConfirmerLaLocalisationImport.update({
    id: '/(report)/signalement/$areaId/confirmer-la-localisation',
    path: '/signalement/$areaId/confirmer-la-localisation',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_isAuthenticated': {
      id: '/_isAuthenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof IsAuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/(map)/carte-interactive': {
      id: '/(map)/carte-interactive'
      path: '/carte-interactive'
      fullPath: '/carte-interactive'
      preLoaderRoute: typeof mapCarteInteractiveImport
      parentRoute: typeof rootRoute
    }
    '/_isAuthenticated/': {
      id: '/_isAuthenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IsAuthenticatedIndexImport
      parentRoute: typeof IsAuthenticatedImport
    }
    '/_isAuthenticated/scheduled-tours/': {
      id: '/_isAuthenticated/scheduled-tours/'
      path: '/scheduled-tours'
      fullPath: '/scheduled-tours'
      preLoaderRoute: typeof IsAuthenticatedScheduledToursIndexImport
      parentRoute: typeof IsAuthenticatedImport
    }
    '/(report)/signalement/$areaId/confirmer-la-localisation': {
      id: '/(report)/signalement/$areaId/confirmer-la-localisation'
      path: '/signalement/$areaId/confirmer-la-localisation'
      fullPath: '/signalement/$areaId/confirmer-la-localisation'
      preLoaderRoute: typeof reportSignalementAreaIdConfirmerLaLocalisationImport
      parentRoute: typeof rootRoute
    }
    '/(report)/signalement/$areaId/formulaire': {
      id: '/(report)/signalement/$areaId/formulaire'
      path: '/signalement/$areaId/formulaire'
      fullPath: '/signalement/$areaId/formulaire'
      preLoaderRoute: typeof reportSignalementAreaIdFormulaireImport
      parentRoute: typeof rootRoute
    }
    '/_isAuthenticated/scheduled-tours/$scheduledTourId/': {
      id: '/_isAuthenticated/scheduled-tours/$scheduledTourId/'
      path: '/scheduled-tours/$scheduledTourId'
      fullPath: '/scheduled-tours/$scheduledTourId'
      preLoaderRoute: typeof IsAuthenticatedScheduledToursScheduledTourIdIndexImport
      parentRoute: typeof IsAuthenticatedImport
    }
  }
}

// Create and export the route tree

interface IsAuthenticatedRouteChildren {
  IsAuthenticatedIndexRoute: typeof IsAuthenticatedIndexRoute
  IsAuthenticatedScheduledToursIndexRoute: typeof IsAuthenticatedScheduledToursIndexRoute
  IsAuthenticatedScheduledToursScheduledTourIdIndexRoute: typeof IsAuthenticatedScheduledToursScheduledTourIdIndexRoute
}

const IsAuthenticatedRouteChildren: IsAuthenticatedRouteChildren = {
  IsAuthenticatedIndexRoute: IsAuthenticatedIndexRoute,
  IsAuthenticatedScheduledToursIndexRoute:
    IsAuthenticatedScheduledToursIndexRoute,
  IsAuthenticatedScheduledToursScheduledTourIdIndexRoute:
    IsAuthenticatedScheduledToursScheduledTourIdIndexRoute,
}

const IsAuthenticatedRouteWithChildren = IsAuthenticatedRoute._addFileChildren(
  IsAuthenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof IsAuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/carte-interactive': typeof mapCarteInteractiveRoute
  '/': typeof IsAuthenticatedIndexRoute
  '/scheduled-tours': typeof IsAuthenticatedScheduledToursIndexRoute
  '/signalement/$areaId/confirmer-la-localisation': typeof reportSignalementAreaIdConfirmerLaLocalisationRoute
  '/signalement/$areaId/formulaire': typeof reportSignalementAreaIdFormulaireRoute
  '/scheduled-tours/$scheduledTourId': typeof IsAuthenticatedScheduledToursScheduledTourIdIndexRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/carte-interactive': typeof mapCarteInteractiveRoute
  '/': typeof IsAuthenticatedIndexRoute
  '/scheduled-tours': typeof IsAuthenticatedScheduledToursIndexRoute
  '/signalement/$areaId/confirmer-la-localisation': typeof reportSignalementAreaIdConfirmerLaLocalisationRoute
  '/signalement/$areaId/formulaire': typeof reportSignalementAreaIdFormulaireRoute
  '/scheduled-tours/$scheduledTourId': typeof IsAuthenticatedScheduledToursScheduledTourIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_isAuthenticated': typeof IsAuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/(map)/carte-interactive': typeof mapCarteInteractiveRoute
  '/_isAuthenticated/': typeof IsAuthenticatedIndexRoute
  '/_isAuthenticated/scheduled-tours/': typeof IsAuthenticatedScheduledToursIndexRoute
  '/(report)/signalement/$areaId/confirmer-la-localisation': typeof reportSignalementAreaIdConfirmerLaLocalisationRoute
  '/(report)/signalement/$areaId/formulaire': typeof reportSignalementAreaIdFormulaireRoute
  '/_isAuthenticated/scheduled-tours/$scheduledTourId/': typeof IsAuthenticatedScheduledToursScheduledTourIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/carte-interactive'
    | '/'
    | '/scheduled-tours'
    | '/signalement/$areaId/confirmer-la-localisation'
    | '/signalement/$areaId/formulaire'
    | '/scheduled-tours/$scheduledTourId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/carte-interactive'
    | '/'
    | '/scheduled-tours'
    | '/signalement/$areaId/confirmer-la-localisation'
    | '/signalement/$areaId/formulaire'
    | '/scheduled-tours/$scheduledTourId'
  id:
    | '__root__'
    | '/_isAuthenticated'
    | '/login'
    | '/(map)/carte-interactive'
    | '/_isAuthenticated/'
    | '/_isAuthenticated/scheduled-tours/'
    | '/(report)/signalement/$areaId/confirmer-la-localisation'
    | '/(report)/signalement/$areaId/formulaire'
    | '/_isAuthenticated/scheduled-tours/$scheduledTourId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IsAuthenticatedRoute: typeof IsAuthenticatedRouteWithChildren
  LoginRoute: typeof LoginRoute
  mapCarteInteractiveRoute: typeof mapCarteInteractiveRoute
  reportSignalementAreaIdConfirmerLaLocalisationRoute: typeof reportSignalementAreaIdConfirmerLaLocalisationRoute
  reportSignalementAreaIdFormulaireRoute: typeof reportSignalementAreaIdFormulaireRoute
}

const rootRouteChildren: RootRouteChildren = {
  IsAuthenticatedRoute: IsAuthenticatedRouteWithChildren,
  LoginRoute: LoginRoute,
  mapCarteInteractiveRoute: mapCarteInteractiveRoute,
  reportSignalementAreaIdConfirmerLaLocalisationRoute:
    reportSignalementAreaIdConfirmerLaLocalisationRoute,
  reportSignalementAreaIdFormulaireRoute:
    reportSignalementAreaIdFormulaireRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_isAuthenticated",
        "/login",
        "/(map)/carte-interactive",
        "/(report)/signalement/$areaId/confirmer-la-localisation",
        "/(report)/signalement/$areaId/formulaire"
      ]
    },
    "/_isAuthenticated": {
      "filePath": "_isAuthenticated.tsx",
      "children": [
        "/_isAuthenticated/",
        "/_isAuthenticated/scheduled-tours/",
        "/_isAuthenticated/scheduled-tours/$scheduledTourId/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/(map)/carte-interactive": {
      "filePath": "(map)/carte-interactive.tsx"
    },
    "/_isAuthenticated/": {
      "filePath": "_isAuthenticated/index.tsx",
      "parent": "/_isAuthenticated"
    },
    "/_isAuthenticated/scheduled-tours/": {
      "filePath": "_isAuthenticated/scheduled-tours/index.tsx",
      "parent": "/_isAuthenticated"
    },
    "/(report)/signalement/$areaId/confirmer-la-localisation": {
      "filePath": "(report)/signalement/$areaId/confirmer-la-localisation.tsx"
    },
    "/(report)/signalement/$areaId/formulaire": {
      "filePath": "(report)/signalement/$areaId/formulaire.tsx"
    },
    "/_isAuthenticated/scheduled-tours/$scheduledTourId/": {
      "filePath": "_isAuthenticated/scheduled-tours/$scheduledTourId/index.tsx",
      "parent": "/_isAuthenticated"
    }
  }
}
ROUTE_MANIFEST_END */
